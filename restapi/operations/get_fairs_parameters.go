// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetFairsParams creates a new GetFairsParams object
//
// There are no default values defined in the spec.
func NewGetFairsParams() GetFairsParams {

	return GetFairsParams{}
}

// GetFairsParams contains all the bound params for the get fairs operation
// typically these are obtained from a http.Request
//
// swagger:parameters getFairs
type GetFairsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The district name
	  In: query
	*/
	DistrictName *string
	/*The fair name
	  In: query
	*/
	FairName *string
	/*The neighborhood name
	  In: query
	*/
	Neighborhood *string
	/*The region5 name
	  In: query
	*/
	Region5 *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFairsParams() beforehand.
func (o *GetFairsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDistrictName, qhkDistrictName, _ := qs.GetOK("districtName")
	if err := o.bindDistrictName(qDistrictName, qhkDistrictName, route.Formats); err != nil {
		res = append(res, err)
	}

	qFairName, qhkFairName, _ := qs.GetOK("fairName")
	if err := o.bindFairName(qFairName, qhkFairName, route.Formats); err != nil {
		res = append(res, err)
	}

	qNeighborhood, qhkNeighborhood, _ := qs.GetOK("neighborhood")
	if err := o.bindNeighborhood(qNeighborhood, qhkNeighborhood, route.Formats); err != nil {
		res = append(res, err)
	}

	qRegion5, qhkRegion5, _ := qs.GetOK("region5")
	if err := o.bindRegion5(qRegion5, qhkRegion5, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDistrictName binds and validates parameter DistrictName from query.
func (o *GetFairsParams) bindDistrictName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DistrictName = &raw

	return nil
}

// bindFairName binds and validates parameter FairName from query.
func (o *GetFairsParams) bindFairName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FairName = &raw

	return nil
}

// bindNeighborhood binds and validates parameter Neighborhood from query.
func (o *GetFairsParams) bindNeighborhood(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Neighborhood = &raw

	return nil
}

// bindRegion5 binds and validates parameter Region5 from query.
func (o *GetFairsParams) bindRegion5(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Region5 = &raw

	return nil
}
