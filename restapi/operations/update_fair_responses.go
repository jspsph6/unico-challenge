// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"unico-challenge/models"
)

// UpdateFairOKCode is the HTTP code returned for type UpdateFairOK
const UpdateFairOKCode int = 200

/*UpdateFairOK Successful operation

swagger:response updateFairOK
*/
type UpdateFairOK struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewUpdateFairOK creates UpdateFairOK with default headers values
func NewUpdateFairOK() *UpdateFairOK {

	return &UpdateFairOK{}
}

// WithPayload adds the payload to the update fair o k response
func (o *UpdateFairOK) WithPayload(payload *models.Response) *UpdateFairOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update fair o k response
func (o *UpdateFairOK) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateFairOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateFairBadRequestCode is the HTTP code returned for type UpdateFairBadRequest
const UpdateFairBadRequestCode int = 400

/*UpdateFairBadRequest One or more fields is invalid

swagger:response updateFairBadRequest
*/
type UpdateFairBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewUpdateFairBadRequest creates UpdateFairBadRequest with default headers values
func NewUpdateFairBadRequest() *UpdateFairBadRequest {

	return &UpdateFairBadRequest{}
}

// WithPayload adds the payload to the update fair bad request response
func (o *UpdateFairBadRequest) WithPayload(payload *models.Response) *UpdateFairBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update fair bad request response
func (o *UpdateFairBadRequest) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateFairBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
