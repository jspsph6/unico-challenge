// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"unico-challenge/models"
)

// GetFairsOKCode is the HTTP code returned for type GetFairsOK
const GetFairsOKCode int = 200

/*GetFairsOK Successful operation

swagger:response getFairsOK
*/
type GetFairsOK struct {

	/*
	  In: Body
	*/
	Payload models.Fairs `json:"body,omitempty"`
}

// NewGetFairsOK creates GetFairsOK with default headers values
func NewGetFairsOK() *GetFairsOK {

	return &GetFairsOK{}
}

// WithPayload adds the payload to the get fairs o k response
func (o *GetFairsOK) WithPayload(payload models.Fairs) *GetFairsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fairs o k response
func (o *GetFairsOK) SetPayload(payload models.Fairs) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFairsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Fairs{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFairsBadRequestCode is the HTTP code returned for type GetFairsBadRequest
const GetFairsBadRequestCode int = 400

/*GetFairsBadRequest One or more fields is invalid

swagger:response getFairsBadRequest
*/
type GetFairsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetFairsBadRequest creates GetFairsBadRequest with default headers values
func NewGetFairsBadRequest() *GetFairsBadRequest {

	return &GetFairsBadRequest{}
}

// WithPayload adds the payload to the get fairs bad request response
func (o *GetFairsBadRequest) WithPayload(payload *models.Response) *GetFairsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fairs bad request response
func (o *GetFairsBadRequest) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFairsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
