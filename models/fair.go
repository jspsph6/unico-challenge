// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Fair fair
//
// swagger:model Fair
type Fair struct {

	// areap
	// Example: 1000
	// Required: true
	Areap *int64 `json:"areap"`

	// code district
	// Example: 10
	// Required: true
	CodeDistrict *int64 `json:"codeDistrict"`

	// code subprefecture
	// Example: 100
	// Required: true
	CodeSubprefecture *int64 `json:"codeSubprefecture"`

	// District name
	// Example: Centro
	// Required: true
	DistrictName *string `json:"districtName"`

	// external Id
	// Example: 1
	// Required: true
	ExternalID *int64 `json:"externalId"`

	// Fair name
	// Example: Feira 123
	// Required: true
	FairName *string `json:"fairName"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// latitude
	// Example: -23558733
	// Required: true
	Latitude *int64 `json:"latitude"`

	// longitude
	// Example: -46550164
	// Required: true
	Longitude *int64 `json:"longitude"`

	// neighborhood
	// Example: Jardim Florido
	// Required: true
	Neighborhood *string `json:"neighborhood"`

	// number
	// Example: 123a
	Number string `json:"number,omitempty"`

	// reference
	// Example: Em frente ao poste
	Reference string `json:"reference,omitempty"`

	// Region 05
	// Example: Leste
	// Required: true
	Region5 *string `json:"region5"`

	// Region 08
	// Example: Centro 2
	// Required: true
	Region8 *string `json:"region8"`

	// Fair register
	// Example: 123-1
	// Required: true
	Register *string `json:"register"`

	// setcens
	// Example: 10
	// Required: true
	Setcens *int64 `json:"setcens"`

	// street
	// Example: Rua Aibi
	// Required: true
	Street *string `json:"street"`

	// Subprefecture name
	// Example: Centro
	// Required: true
	Subprefecture *string `json:"subprefecture"`
}

// Validate validates this fair
func (m *Fair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAreap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeDistrict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeSubprefecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistrictName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFairName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeighborhood(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetcens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubprefecture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fair) validateAreap(formats strfmt.Registry) error {

	if err := validate.Required("areap", "body", m.Areap); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateCodeDistrict(formats strfmt.Registry) error {

	if err := validate.Required("codeDistrict", "body", m.CodeDistrict); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateCodeSubprefecture(formats strfmt.Registry) error {

	if err := validate.Required("codeSubprefecture", "body", m.CodeSubprefecture); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateDistrictName(formats strfmt.Registry) error {

	if err := validate.Required("districtName", "body", m.DistrictName); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateFairName(formats strfmt.Registry) error {

	if err := validate.Required("fairName", "body", m.FairName); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateNeighborhood(formats strfmt.Registry) error {

	if err := validate.Required("neighborhood", "body", m.Neighborhood); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateRegion5(formats strfmt.Registry) error {

	if err := validate.Required("region5", "body", m.Region5); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateRegion8(formats strfmt.Registry) error {

	if err := validate.Required("region8", "body", m.Region8); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateRegister(formats strfmt.Registry) error {

	if err := validate.Required("register", "body", m.Register); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateSetcens(formats strfmt.Registry) error {

	if err := validate.Required("setcens", "body", m.Setcens); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateStreet(formats strfmt.Registry) error {

	if err := validate.Required("street", "body", m.Street); err != nil {
		return err
	}

	return nil
}

func (m *Fair) validateSubprefecture(formats strfmt.Registry) error {

	if err := validate.Required("subprefecture", "body", m.Subprefecture); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fair based on context it is used
func (m *Fair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Fair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Fair) UnmarshalBinary(b []byte) error {
	var res Fair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
